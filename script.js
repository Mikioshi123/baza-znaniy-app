document.addEventListener('DOMContentLoaded', () => {

    const SUPABASE_URL = 'https://adyqqfkwgdzanpgsvzgl.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFkeXFxZmt3Z2R6YW5wZ3N2emdsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE1NTM1NTgsImV4cCI6MjA2NzEyOTU1OH0.rfFekXWr933GcjA2JZQ2gvUObS3zuzctDQZvZfopP2g';

    const appContainer = document.getElementById('appContainer');
    const tg = window.Telegram.WebApp;
    tg.ready();

    const { createClient } = supabase;
    const supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    let currentUser;
    let objectionsData = [];
    let gamificationData = { balance: 0, tasks: [], shop_items: [] };

    async function main() {
        showLoader("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...");
        currentUser = tg.initDataUnsafe?.user;
        if (!currentUser?.id) { showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."); return; }

        try {
            const { data: authData, error: authError } = await supabaseClient.functions.invoke('check-and-add-employee', { body: { user: currentUser } });
            if (authError || !authData.accessGranted) throw new Error(authData.reason || "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω");

            await loadAllData();
            renderAppShell(currentUser.first_name);
            showTab('knowledgeBase'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        } catch (error) {
            console.error(error);
            showError(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    async function loadAllData() {
        showLoader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
        const [gamificationRes, objectionsRes] = await Promise.all([
            supabaseClient.functions.invoke('get-gamification-data', { body: { userId: currentUser.id } }),
            supabaseClient.from('objections').select('*')
        ]);
        if (gamificationRes.error) throw gamificationRes.error;
        if (objectionsRes.error) throw objectionsRes.error;
        gamificationData = gamificationRes.data;
        objectionsData = objectionsRes.data;
    }

    function showLoader(text) { appContainer.innerHTML = `<div class="loader">${text}</div>`; }
    function showError(text) { appContainer.innerHTML = `<div class="error-screen"><h3>–û—à–∏–±–∫–∞</h3><p>${text}</p></div>`; }

    function renderAppShell(userName) {
        if (tg.colorScheme) { document.body.className = tg.colorScheme; }
        appContainer.innerHTML = `
            <h1>–ü—Ä–∏–≤–µ—Ç, ${userName}!</h1>
            <div class="tabs">
                <button class="tab-button" data-tab="knowledgeBase">–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</button>
                <button class="tab-button" data-tab="gamification">–ó–∞–¥–∞–Ω–∏—è –∏ –ü—Ä–∏–∑—ã</button>
            </div>
            <div id="knowledgeBase" class="tab-content"></div>
            <div id="gamification" class="tab-content"></div>
        `;
        document.querySelectorAll('.tab-button').forEach(button => {
            button.addEventListener('click', () => showTab(button.dataset.tab));
        });
    }

    function showTab(tabId) {
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        document.querySelectorAll('.tab-button').forEach(button => button.classList.remove('active'));

        document.getElementById(tabId).classList.add('active');
        document.querySelector(`.tab-button[data-tab="${tabId}"]`).classList.add('active');

        if (tabId === 'knowledgeBase') {
            renderKnowledgeBase();
        } else if (tabId === 'gamification') {
            renderGamificationPage();
        }
    }

    function renderKnowledgeBase() {
        const container = document.getElementById('knowledgeBase');
        container.innerHTML = `
        <p>–ü–æ–∏—Å–∫ –ø–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º</p>
        <div class="controls">
            <input type="text" id="searchInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞...">
            <div class="filters">
                <button class="filter-btn active" data-filter="all">–í—Å–µ</button>
                <button class="filter-btn" data-filter="–£–ø–∞–∫–æ–≤–∫–∞">–£–ø–∞–∫–æ–≤–∫–∞</button>
                <button class="filter-btn" data-filter="–ë—Ä–æ–∫–µ—Ä–∏–¥–∂">–ë—Ä–æ–∫–µ—Ä–∏–¥–∂</button>
            </div>
        </div>
        <div id="resultsContainer"></div>
    `;

        // –ó–∞–Ω–æ–≤–æ –Ω–∞–≤–µ—à–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –Ω–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const searchInput = document.getElementById('searchInput');
        const filterButtons = document.querySelectorAll('.filter-btn');

        searchInput.addEventListener('input', (e) => {
            currentSearchTerm = e.target.value;
            performSearchAndRender();
        });

        filterButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                filterButtons.forEach(btn => btn.classList.remove('active'));
                e.target.classList.add('active');
                currentFilter = e.target.dataset.filter;
                performSearchAndRender();
            });
        });

        // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        performSearchAndRender();
    }

    function performSearchAndRender(searchTerm) { /* ... (–ö–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ... */ }
    function renderResults(results) { /* ... (–ö–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ... */ }
    function setupCardInteractionListeners() { /* ... (–ö–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ... */ }
    async function saveData() { /* ... (–ö–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ... */ }
    // ... –∏ —Ç.–¥. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç –ë–∞–∑—ã –ó–Ω–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å

    // --- –õ–û–ì–ò–ö–ê –í–ö–õ–ê–î–ö–ò "–ó–ê–î–ê–ù–ò–Ø –ò –ü–†–ò–ó–´" ---
    function renderGamificationPage() {
        const container = document.getElementById('gamification');
        container.innerHTML = `
            <div class="gamification-page">
                <div class="balance-display">–ú–æ–∏ –ú–∞—Ä–∫–µ—Ç–∫–æ–∏–Ω—ã: <span>${gamificationData.balance} ü™ô</span></div>
                
                <h2>–ó–∞–¥–∞–Ω–∏—è</h2>
                <div id="tasks-list"></div>
                
                <h2>–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–∑–æ–≤</h2>
                <div id="shop-list"></div>
            </div>
        `;
        renderTasks();
        renderShop();
    }

    function renderTasks() {
        const container = document.getElementById('tasks-list');
        container.innerHTML = gamificationData.tasks.map(task => {
            const progress = Math.min(100, (task.current_count / task.target_count) * 100);
            return `
                <div class="task-card ${task.is_completed && !task.is_repeatable ? 'completed' : ''}">
                    <div class="task-title">${task.title}</div>
                    <div class="task-description">${task.description}</div>
                    <div class="progress-bar"><div class="progress-bar-inner" style="width: ${progress}%;"></div></div>
                    <div class="progress-text">${task.current_count} / ${task.target_count}</div>
                    <div class="reward">+${task.reward_coins} ü™ô</div>
                </div>
            `;
        }).join('');
    }

    function renderShop() {
        const container = document.getElementById('shop-list');
        container.innerHTML = gamificationData.shop_items.map(item => `
            <div class="shop-item-card">
                <div class="shop-item-info">
                    <h4>${item.name}</h4>
                    <p>${item.description || ''}</p>
                </div>
                <div class="shop-item-buy">
                    <div class="price">${item.price} ü™ô</div>
                    <button class="buy-btn" data-item-id="${item.id}" data-item-price="${item.price}" ${gamificationData.balance < item.price ? 'disabled' : ''}>–ö—É–ø–∏—Ç—å</button>
                </div>
            </div>
        `).join('');

        document.querySelectorAll('.buy-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const itemId = parseInt(e.target.dataset.itemId);
                const itemPrice = parseInt(e.target.dataset.itemPrice);
                tg.showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∑–∞ ${itemPrice} –º–∞—Ä–∫–µ—Ç–∫–æ–∏–Ω–æ–≤?`, (confirmed) => {
                    if (confirmed) {
                        purchaseItem(itemId);
                    }
                });
            });
        });
    }

    async function purchaseItem(itemId) {
        try {
            const { data, error } = await supabaseClient.functions.invoke('purchase-item', {
                body: { userId: currentUser.id, itemId: itemId }
            });
            if (error) throw new Error(error.message);
            if (!data.success) throw new Error(data.message);

            tg.showAlert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!');
            await loadAllData(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            renderGamificationPage(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        } catch (error) {
            tg.showAlert(`–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${error.message}`);
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    main();
});