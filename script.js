document.addEventListener('DOMContentLoaded', () => {

    // --- –ù–ê–°–¢–†–û–ô–ö–ò ---
    // üî¥ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ URL –∏ –∫–ª—é—á!
    const SUPABASE_URL = 'https://adyqqfkwgdzanpgsvzgl.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFkeXFxZmt3Z2R6YW5wZ3N2emdsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE1NTM1NTgsImV4cCI6MjA2NzEyOTU1OH0.rfFekXWr933GcjA2JZQ2gvUObS3zuzctDQZvZfopP2g';
    // -----------------

    const appContainer = document.getElementById('appContainer');
    const tg = window.Telegram.WebApp;
    tg.ready();

    const { createClient } = supabase;
    const supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    let currentUser;
    let objectionsData = [];
    let userPersonalData = { notes: {}, ratings: {} };
    let currentFilter = 'all';
    let currentSearchTerm = '';

    // --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    async function main() {
        showLoader("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...");
        currentUser = tg.initDataUnsafe?.user;
        if (!currentUser?.id) { /* ... */ }

        try {
            // ... (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            const [personalDataRes, objectionsRes] = await Promise.all([
                supabaseClient.functions.invoke('get-user-data', { body: {} }),
                supabaseClient.from('objections').select('*')
            ]);
            // ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤)
            userPersonalData = personalDataRes.data;
            objectionsData = objectionsRes.data;

            renderMainInterface(currentUser.first_name);
            performSearchAndRender();

        } catch (error) { /* ... */ }
    }

    // --- –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–û–ú (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    function showLoader(text) { /* ... */ }
    function showError(text) { /* ... */ }
    function renderMainInterface(userName) { /* ... */ }
    function renderResults(results) { /* ... */ }

    // --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–ï–†–í–ï–†–û–ú (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    async function saveData(objectionId, noteText, ratingValue) { /* ... */ }
    async function deleteData(objectionId) { /* ... */ }
    async function reportMissingObjection() { /* ... */ }
    async function refreshPersonalData() { /* ... */ }

    // --- –§–£–ù–ö–¶–ò–ò-–°–õ–£–®–ê–¢–ï–õ–ò –°–û–ë–´–¢–ò–ô (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    function setupCardInteractionListeners() { /* ... */ }
    function setupStaticEventListeners() { /* ... */ }

    // --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –ò –û–¢–†–ò–°–û–í–ö–ò (–° –ò–ó–ú–ï–ù–ï–ù–ò–Ø–ú–ò) ---
    function performSearchAndRender() {
        let results = objectionsData;

        // 1. –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (currentFilter !== 'all') {
            results = results.filter(item => item.category === currentFilter);
        }

        // 2. –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (currentSearchTerm.trim() === '') {
            renderResults(results);
            return;
        }

        // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º "—É–º–Ω—ã–π" –ø–æ–∏—Å–∫ Fuse.js
        const fuseOptions = {
            // –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∏—Ö "–≤–µ—Å" (–≤–∞–∂–Ω–æ—Å—Ç—å)
            keys: [
                { name: 'question', weight: 0.8 }, // –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö –û–ß–ï–ù–¨ –≤–∞–∂–Ω—ã
                { name: 'answer', weight: 0.2 }  // –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã
            ],
            includeScore: true, // –í–∫–ª—é—á–∞–µ–º, —á—Ç–æ–±—ã Fuse.js —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            threshold: 0.4,     // –ù–∞—Å–∫–æ–ª—å–∫–æ "–Ω–µ—á–µ—Ç–∫–∏–º" –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∏—Å–∫
            ignoreLocation: true, // –ò—Å–∫–∞—Ç—å –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞
        };

        const fuse = new Fuse(results, fuseOptions);
        const searchResult = fuse.search(currentSearchTerm);

        renderResults(searchResult);
    }

    // –ö–æ–ø–∏–ø–∞—Å—Ç —Ç–µ–ª –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –º–µ–Ω—è–ª–∏—Å—å, –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
    function showLoader(text) { appContainer.innerHTML = `<div class="loader">${text}</div>`; }
    function showError(text) { appContainer.innerHTML = `<div class="error-screen"><h3>–û—à–∏–±–∫–∞</h3><p>${text}</p></div>`; }
    function renderMainInterface(userName) { if (tg.colorScheme) { document.body.className = tg.colorScheme; } appContainer.innerHTML = `<h1>–ü—Ä–∏–≤–µ—Ç, ${userName}!</h1><p>–ü–æ–∏—Å–∫ –ø–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º</p><div class="controls"><input type="text" id="searchInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞..."><div class="filters"><button class="filter-btn active" data-filter="all">–í—Å–µ</button><button class="filter-btn" data-filter="–£–ø–∞–∫–æ–≤–∫–∞">–£–ø–∞–∫–æ–≤–∫–∞</button><button class="filter-btn" data-filter="–ë—Ä–æ–∫–µ—Ä–∏–¥–∂">–ë—Ä–æ–∫–µ—Ä–∏–¥–∂</button></div></div><div id="resultsContainer"></div>`; setupStaticEventListeners(); }
    function renderResults(results) { const resultsContainer = document.getElementById('resultsContainer'); resultsContainer.innerHTML = ''; if (!results || results.length === 0) { const searchTerm = currentSearchTerm; resultsContainer.innerHTML = `<div class="not-found-container"><p>–ü–æ –∑–∞–ø—Ä–æ—Å—É "<strong>${searchTerm}</strong>" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p><button class="action-btn" id="report-btn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É</button></div>`; document.getElementById('report-btn')?.addEventListener('click', reportMissingObjection); return; } results.forEach(item => { const record = item.item ? item.item : item; const card = document.createElement('div'); card.className = 'item-card'; const objectionNotes = userPersonalData.notes[record.id] || []; const objectionRatings = userPersonalData.ratings[record.id] || []; const currentUserRatingObj = objectionRatings.find(r => r.authorId === currentUser.id); const currentUserNoteObj = objectionNotes.find(n => n.authorId === currentUser.id); const currentUserRating = currentUserRatingObj?.value || 0; const currentUserNote = currentUserNoteObj?.text || ''; const othersNotesHTML = objectionNotes.filter(n => n.authorId !== currentUser.id).map(n => `<div class="note-item"><div class="note-author">${n.author || '–ê–Ω–æ–Ω–∏–º'} –Ω–∞–ø–∏—Å–∞–ª:</div><div class="note-text">${(n.text || '').replace(/\n/g, '<br>')}</div></div>`).join(''); const averageRating = objectionRatings.length > 0 ? Math.round(objectionRatings.reduce((sum, r) => sum + r.value, 0) / objectionRatings.length) : 0; card.innerHTML = `<h3>${record.question} <span class="category-badge">${record.category}</span></h3><p>${record.answer ? record.answer.replace(/\n/g, '<br>') : ''}</p><div class="user-interaction"><h4>–í–∞—à –æ—Ç–∑—ã–≤:</h4><div class="rating-stars" data-objection-id="${record.id}">${[1, 2, 3, 4, 5].map(star => `<span class="star ${star <= currentUserRating ? 'filled' : ''}" data-value="${star}">‚òÖ</span>`).join('')}</div><textarea class="note-input" data-objection-id="${record.id}" placeholder="–í–∞—à–∞ –ª–∏—á–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞...">${currentUserNote}</textarea><div class="card-actions"><button class="action-btn" data-action="save" data-id="${record.id}">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>${(currentUserRatingObj || currentUserNoteObj) ? `<button class="action-btn delete" data-action="delete" data-id="${record.id}">–£–¥–∞–ª–∏—Ç—å –º–æ–π –æ—Ç–∑—ã–≤</button>` : ''}</div></div><div class="public-feedback"><h4>–û—Ç–∑—ã–≤—ã –∫–æ–º–∞–Ω–¥—ã:</h4><div class="average-rating">–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${[1, 2, 3, 4, 5].map(star => `<span class="star small ${star <= averageRating ? 'filled' : ''}">‚òÖ</span>`).join('')} (${objectionRatings.length} –æ—Ü–µ–Ω–æ–∫)</div><div class="notes-list">${othersNotesHTML.length > 0 ? othersNotesHTML : '<p class="no-feedback">–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∑–∞–º–µ—Ç–æ–∫.</p>'}</div></div>`; resultsContainer.appendChild(card); }); setupCardInteractionListeners(); }
    async function saveData(objectionId, noteText, ratingValue) { try { await supabaseClient.functions.invoke('save-user-data', { body: { userId: currentUser.id, objectionId, note: noteText, rating: ratingValue } }); tg.showAlert('–í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!'); await refreshPersonalData(); performSearchAndRender(); } catch (error) { console.error("Failed to save data:", error); tg.showAlert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.'); } }
    async function deleteData(objectionId) { try { await Promise.all([supabaseClient.functions.invoke('delete-user-data', { body: { userId: currentUser.id, objectionId, type: 'note' } }), supabaseClient.functions.invoke('delete-user-data', { body: { userId: currentUser.id, objectionId, type: 'rating' } })]); tg.showAlert('–í–∞—à –æ—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω.'); await refreshPersonalData(); performSearchAndRender(); } catch (error) { console.error("Failed to delete data:", error); tg.showAlert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.'); } }
    async function reportMissingObjection() { const searchInput = document.getElementById('searchInput'); const searchTerm = searchInput.value; if (!searchTerm) { tg.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏.'); return; } const reportButton = document.getElementById('report-btn'); if (reportButton) { reportButton.disabled = true; reportButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...'; } try { await supabaseClient.functions.invoke('report-missing-objection', { body: { searchTerm: searchTerm, user: currentUser } }); if (reportButton) { reportButton.textContent = '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!'; } searchInput.value = ''; } catch (error) { console.error("Failed to report missing objection:", error); tg.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞.'); if (reportButton) { reportButton.disabled = false; reportButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É'; } } }
    async function refreshPersonalData() { const { data, error } = await supabaseClient.functions.invoke('get-user-data', { body: {} }); if (error) { console.error("Failed to refresh personal data:", error); return; } userPersonalData = data; }
    function setupCardInteractionListeners() { document.querySelectorAll('.rating-stars').forEach(starsContainer => { starsContainer.addEventListener('click', (e) => { if (e.target.classList.contains('star')) { const ratingValue = parseInt(e.target.dataset.value); starsContainer.querySelectorAll('.star').forEach(star => { star.classList.toggle('filled', parseInt(star.dataset.value) <= ratingValue); }); } }); }); document.querySelectorAll('.action-btn[data-action]').forEach(button => { button.addEventListener('click', (e) => { const objectionId = parseInt(e.target.dataset.id); const action = e.target.dataset.action; if (action === 'save') { const noteInput = document.querySelector(`.note-input[data-objection-id="${objectionId}"]`); const starsContainer = document.querySelector(`.rating-stars[data-objection-id="${objectionId}"]`); const rating = starsContainer.querySelectorAll('.star.filled').length; saveData(objectionId, noteInput.value, rating); } else if (action === 'delete') { tg.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤?', (confirmed) => { if (confirmed) { deleteData(objectionId); } }); } }); }); }
    function setupStaticEventListeners() { const searchInput = document.getElementById('searchInput'); const filterButtons = document.querySelectorAll('.filter-btn'); searchInput.addEventListener('input', (e) => { currentSearchTerm = e.target.value; performSearchAndRender(); }); filterButtons.forEach(button => { button.addEventListener('click', (e) => { filterButtons.forEach(btn => btn.classList.remove('active')); e.target.classList.add('active'); currentFilter = e.target.dataset.filter; performSearchAndRender(); }); }); }

    main();
});