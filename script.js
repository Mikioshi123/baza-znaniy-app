document.addEventListener('DOMContentLoaded', () => {

    // --- –ù–ê–°–¢–†–û–ô–ö–ò ---
    // üî¥ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ URL –∏ –∫–ª—é—á!
    const SUPABASE_URL = 'https://adyqqfkwgdzanpgsvzgl.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFkeXFxZmt3Z2R6YW5wZ3N2emdsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE1NTM1NTgsImV4cCI6MjA2NzEyOTU1OH0.rfFekXWr933GcjA2JZQ2gvUObS3zuzctDQZvZfopP2g';
    // -----------------

    // --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
    const appContainer = document.querySelector('.app-content');
    const tg = window.Telegram.WebApp;
    const { createClient } = supabase;
    const supabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    let currentUser;
    let objectionsData = [];
    let gamificationData = { balance: 0, tasks: [], shopItems: [] };
    let currentFilter = 'all';
    let currentSearchTerm = '';

    // --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
    async function main() {
        tg.ready();
        document.body.className = tg.colorScheme || 'light';
        showLoader("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...");
        currentUser = tg.initDataUnsafe?.user;
        if (!currentUser?.id) {
            showError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.");
            return;
        }

        try {
            const { data: authData, error: authError } = await supabaseClient.functions.invoke('check-and-add-employee', { body: { user: currentUser } });
            if (authError || !authData.accessGranted) throw new Error(authData.reason || "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω");

            showLoader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
            await loadAllData();

            renderKnowledgeBase(); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            renderGamificationPage(); // –†–µ–Ω–¥–µ—Ä–∏–º –≤—Ç–æ—Ä—É—é –≤–∫–ª–∞–¥–∫—É –≤ —Ñ–æ–Ω–µ
            setupTabListeners();

        } catch (error) {
            console.error(error);
            showError(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    async function loadAllData() {
        const [gamificationRes, objectionsRes] = await Promise.all([
            supabaseClient.functions.invoke('get-gamification-data', { body: { userId: currentUser.id } }),
            supabaseClient.from('objections').select('*')
        ]);
        if (gamificationRes.error) throw gamificationRes.error;
        if (objectionsRes.error) throw objectionsRes.error;
        gamificationData = gamificationRes.data;
        objectionsData = objectionsRes.data;
    }

    // --- –†–ï–ù–î–ï–† –û–°–ù–û–í–ù–´–• –†–ê–ó–î–ï–õ–û–í ---
    function showLoader(text) { appContainer.innerHTML = `<div class="loader">${text}</div>`; }
    function showError(text) { appContainer.innerHTML = `<div class="error-screen"><h3>–û—à–∏–±–∫–∞</h3><p>${text}</p></div>`; }

    function renderKnowledgeBase() {
        const kbPanel = document.getElementById('knowledge-base-panel');
        kbPanel.innerHTML = `
            <div class="header">
                <h1>–ü—Ä–∏–≤–µ—Ç, ${currentUser.first_name}!</h1>
            </div>
            <p>–ü–æ–∏—Å–∫ –ø–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º</p>
            <div class="controls">
                <input type="text" id="searchInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞..." value="${currentSearchTerm}">
                <div class="filters">
                    <button class="filter-btn ${currentFilter === 'all' ? 'active' : ''}" data-filter="all">–í—Å–µ</button>
                    <button class="filter-btn ${currentFilter === '–£–ø–∞–∫–æ–≤–∫–∞' ? 'active' : ''}" data-filter="–£–ø–∞–∫–æ–≤–∫–∞">–£–ø–∞–∫–æ–≤–∫–∞</button>
                    <button class="filter-btn ${currentFilter === '–ë—Ä–æ–∫–µ—Ä–∏–¥–∂' ? 'active' : ''}" data-filter="–ë—Ä–æ–∫–µ—Ä–∏–¥–∂">–ë—Ä–æ–∫–µ—Ä–∏–¥–∂</button>
                </div>
            </div>
            <div id="resultsContainer"></div>`;
        setupKBSearchAndFilters();
        performSearchAndRender();
    }

    function renderGamificationPage() {
        const gPanel = document.getElementById('gamification-panel');
        const balance = gamificationData.balance || 0;

        const tasksHTML = gamificationData.tasks.map(task => {
            const progress = task.is_completed ? 100 : Math.round(((task.employee_tasks[0]?.current_count || 0) / task.target_count) * 100);
            return `
                <div class="task-item ${task.is_completed ? 'completed' : ''}">
                    <div class="task-title">${task.title} (+${task.reward_coins}üíé)</div>
                    <div class="task-desc">${task.description}</div>
                    <div class="task-progress-bar"><div class="task-progress" style="width: ${progress}%;"></div></div>
                    <div class="task-status">${task.is_completed ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : `${(task.employee_tasks[0]?.current_count || 0)}/${task.target_count}`}</div>
                </div>`;
        }).join('') || '<p>–ù–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.</p>';

        const shopHTML = gamificationData.shopItems.map(item => `
            <div class="shop-item">
                <span class="shop-item-price">${item.price} üíé</span>
                <div class="shop-item-name">${item.name}</div>
                <div class="shop-item-desc">${item.description}</div>
                <button class="buy-btn" data-id="${item.id}" data-price="${item.price}" ${balance < item.price ? 'disabled' : ''}>–ö—É–ø–∏—Ç—å</button>
            </div>
        `).join('') || '<p>–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.</p>';

        gPanel.innerHTML = `
            <div class="gamification-header">
                <div>–í–∞—à –±–∞–ª–∞–Ω—Å:</div>
                <div class="coin-balance">${balance} üíé</div>
            </div>
            <div class="gamification-section">
                <h2>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h2>
                <div class="tasks-list">${tasksHTML}</div>
            </div>
            <div class="gamification-section">
                <h2>–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–∑–æ–≤</h2>
                <div class="shop-list">${shopHTML}</div>
            </div>`;
        setupGamificationListeners();
    }

    // --- –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê (–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô) ---
    function performSearchAndRender() {
        // ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }
    function renderResults(results) {
        // ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }

    // --- –õ–û–ì–ò–ö–ê –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø (–ë–ê–ó–ê –ó–ù–ê–ù–ò–ô) ---
    function setupCardInteractionListeners() {
        // ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }
    async function saveData(objectionId, noteText, ratingValue) {
        // ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }
    async function deleteData(objectionId) {
        // ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }
    async function reportMissingObjection() {
        // ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }
    async function refreshPersonalData() {
        const { data, error } = await supabaseClient.functions.invoke('get-user-data', { body: {} });
        if (!error) { userPersonalData = data; }
    }

    // --- –°–õ–£–®–ê–¢–ï–õ–ò –°–û–ë–´–¢–ò–ô ---
    function setupTabListeners() {
        const tabButtons = document.querySelectorAll('.tab-btn');
        const tabPanels = document.querySelectorAll('.tab-panel');
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                tabButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                const targetTab = button.dataset.tab;
                tabPanels.forEach(panel => {
                    panel.classList.toggle('active', panel.id === `${targetTab}-panel`);
                });
            });
        });
    }
    function setupKBSearchAndFilters() {
        // ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    }
    function setupGamificationListeners() {
        document.querySelectorAll('.buy-btn').forEach(button => {
            button.addEventListener('click', async (e) => {
                const itemId = parseInt(e.target.dataset.id);
                const itemPrice = parseInt(e.target.dataset.price);
                tg.showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–∑ –∑–∞ ${itemPrice} üíé?`, async (confirmed) => {
                    if (confirmed) {
                        try {
                            const { data, error } = await supabaseClient.functions.invoke('purchase-item', { body: { userId: currentUser.id, itemId } });
                            if (error || !data.success) throw new Error(data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É.");
                            tg.showAlert('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!');
                            await loadAllData(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                            renderGamificationPage(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        } catch (err) {
                            tg.showAlert(err.message);
                        }
                    }
                });
            });
        });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    main();
});